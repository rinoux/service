<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <!-- 自动将包前缀为cc.rinoux.server.*的包中以@Service@Component@Controller标注的类注册为bean
            在jersey中，ResourceConfig的实现类将服务所在的包注册（***packages("cc.rinoux.server.service");***）
            相当于为包中类添加了@Component注解 -->
	<context:component-scan base-package="cc.rinoux.server.*" />	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<!--阿里云端数据库配置-->
        <property name="url" value="jdbc:mysql://139.129.12.15:3306/office_cup"/>
        <property name="username" value="root"/>
        <property name="password" value="wwkj0001"/>
	</bean>
	<!-- sqlSessionFactoryBean相当于sqlSrssionFactoryBuilder,在mybatis-spring用法中，
	无需直接使用bean或sqlsessionFactory，session工厂将会被注入到MapperFactoryBean或
	其它扩展了sqlSessionSupport的DAO
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource" />
	  <property name="configLocation" value="classpath:mybatis.xml"></property>
	  <!-- 将mapper包中所有文件和XXXmapper.xml文件对应起来 -->
	  <property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>
	<!-- dao 自动扫描mapper中的DAO，并注册为bean-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="cc.rinoux.server.mapper" />
	</bean>
	<!--  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  	  <property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<bean id="OSSOperator" class="cc.rinoux.server.aliyun.oss.OSSOperator"/>	
	<bean id="Response" class="cc.rinoux.server.pojo.RespModel"/>
	
	<bean id="nonDataHandler" class="cc.rinoux.server.mina.handler.NonDataMessageProcessor"/>
	<bean id="ioHanlder" class="cc.rinoux.server.mina.handler.ServerSessionHandler"/>

 
 
 <!-- 单独的CupMapper的bean，与上面自动化的MapperScannerConfigurer不冲突 -->
	<bean id="cupMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
      <property name="mapperInterface" value="cc.rinoux.server.mapper.CupMapper" />
      <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
	
</beans>
